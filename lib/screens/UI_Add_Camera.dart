// Import c√°c g√≥i c·∫ßn thi·∫øt
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart'; // üëà th√™m d√≤ng n√†y
import '../services/auth_service.dart';
import '../screens/CameraStreamScreen.dart';

// M√†n h√¨nh ƒë·ªÉ th√™m camera m·ªõi
class AddCameraScreen extends StatefulWidget {
  const AddCameraScreen({Key? key}) : super(key: key);

  @override
  _AddCameraScreenState createState() => _AddCameraScreenState();
}

class _AddCameraScreenState extends State<AddCameraScreen> {
  // B·ªô ƒëi·ªÅu khi·ªÉn (controller) ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ c√°c TextField
  final _cameraNameController = TextEditingController();
  final _streamUrlController = TextEditingController();
  final _locationController = TextEditingController();

  // Bi·∫øn ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu
  bool _isLoading = false;

  // üëâ H√†m l∆∞u camera m·ªõi v√†o SharedPreferences
  Future<void> _saveCamera(Map<String, dynamic> camera) async {
    final prefs = await SharedPreferences.getInstance();
    List<String> cameras = prefs.getStringList('cameras') ?? [];
    cameras.add(jsonEncode(camera));
    await prefs.setStringList('cameras', cameras);
  }

  // Th√™m h√†m n√†y v√†o class _AddCameraScreenState
  Future<void> _addNewCamera() async {
    // L·∫•y d·ªØ li·ªáu t·ª´ c√°c controller
    final cameraName = _cameraNameController.text.trim();
    final streamUrl = _streamUrlController.text.trim();
    final location = _locationController.text.trim();

    // Ki·ªÉm tra n·∫øu c√°c tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c ƒëi·ªÅn ƒë·∫ßy ƒë·ªß
    if (cameraName.isEmpty || streamUrl.isEmpty || location.isEmpty) {
      _showSnackBar('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.', Colors.red);
      return;
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫£i
    setState(() {
      _isLoading = true;
    });

    try {
      // ƒê·ªãa ch·ªâ API c·ªßa b·∫°n
      const String apiUrl =
          'http://192.168.1.214:3000/api/cameras'; // Thay ƒë·ªïi IP v√† port cho ph√π h·ª£p

      // G·ª≠i y√™u c·∫ßu POST l√™n server
      final authHeader = await AuthService.getAuthHeader();

      if (authHeader == null) {
        _showSnackBar('Kh√¥ng th·ªÉ l·∫•y token x√°c th·ª±c.', Colors.red);
        setState(() {
          _isLoading = false;
        });
        return;
      }

      final response = await http.post(
        Uri.parse(apiUrl),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': authHeader, // S·ª≠ d·ª•ng header ƒë√£ l·∫•y
        },
        body: jsonEncode(<String, String>{
          'cameraName': cameraName,
          'streamUrl': streamUrl,
          'location': location,
          'status': 'active',
        }),
      );

      // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ server
      if (response.statusCode == 201 || response.statusCode == 200) {
        _showSnackBar('Th√™m camera th√†nh c√¥ng!', Colors.green);

        // T·∫°o object camera
        final newCamera = {
          'id': DateTime.now().millisecondsSinceEpoch.toString(),
          'cameraName': cameraName,
          'streamUrl': streamUrl,
          'location': location,
        };

        // üëâ L∆∞u v√†o local
        await _saveCamera(newCamera);

        if (mounted) {
          Navigator.pop(context, true); // üëà quay v·ªÅ HomeScreen, b√°o th√†nh c√¥ng
        }
      }
    } catch (e) {
      // X·ª≠ l√Ω l·ªói khi g·ª≠i y√™u c·∫ßu (v√≠ d·ª•: m·∫•t k·∫øt n·ªëi m·∫°ng)
      _showSnackBar('C√≥ l·ªói x·∫£y ra: $e', Colors.red);
      print('L·ªói k·∫øt n·ªëi: $e');
    } finally {
      // D√π th√†nh c√¥ng hay th·∫•t b·∫°i, h√£y t·∫Øt tr·∫°ng th√°i t·∫£i
      setState(() {
        _isLoading = false;
      });
    }
  }

  // H√†m tr·ª£ gi√∫p ƒë·ªÉ hi·ªÉn th·ªã SnackBar
  void _showSnackBar(String message, Color color) {
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(SnackBar(content: Text(message), backgroundColor: color));
  }

  @override
  void dispose() {
    // Gi·∫£i ph√≥ng b·ªô ƒëi·ªÅu khi·ªÉn khi widget b·ªã h·ªßy
    _cameraNameController.dispose();
    _streamUrlController.dispose();
    _locationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Th√™m Camera M·ªõi')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Tr∆∞·ªùng nh·∫≠p t√™n camera
            TextField(
              controller: _cameraNameController,
              decoration: const InputDecoration(
                labelText: 'T√™n Camera',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            // Tr∆∞·ªùng nh·∫≠p Stream URL
            TextField(
              controller: _streamUrlController,
              decoration: const InputDecoration(
                labelText: 'Stream URL',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            // Tr∆∞·ªùng nh·∫≠p v·ªã tr√≠
            TextField(
              controller: _locationController,
              decoration: const InputDecoration(
                labelText: 'V·ªã tr√≠',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 30),
            // N√∫t Th√™m Camera
            _isLoading
                ? const CircularProgressIndicator() // Hi·ªÉn th·ªã v√≤ng tr√≤n t·∫£i n·∫øu ƒëang x·ª≠ l√Ω
                : ElevatedButton(
                  onPressed: _addNewCamera,
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 40,
                      vertical: 15,
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(25),
                    ),
                  ),
                  child: const Text(
                    'Th√™m Camera',
                    style: TextStyle(fontSize: 16),
                  ),
                ),
          ],
        ),
      ),
    );
  }
}
