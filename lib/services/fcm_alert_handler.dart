import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import '../services/notification_service.dart';
import '../models/alert.dart';
import '../screens/UI_alert_detail.dart';

class FcmAlertHandler {
  static final FcmAlertHandler _instance = FcmAlertHandler._internal();
  factory FcmAlertHandler() => _instance;
  FcmAlertHandler._internal();

  final FirebaseMessaging _messaging = FirebaseMessaging.instance;
  final NotificationService _notificationService = NotificationService();

  // Khai b√°o NavigatorKey ƒë·ªÉ s·ª≠ d·ª•ng trong to√†n ·ª©ng d·ª•ng
  static final GlobalKey<NavigatorState> navigatorKey =
      GlobalKey<NavigatorState>();

  // H√†m x·ª≠ l√Ω th√¥ng b√°o n·ªÅn (background)
  static Future<void> backgroundHandler(RemoteMessage message) async {
    try {
      await Firebase.initializeApp();
      print("üî• Nh·∫≠n alert n·ªÅn t·ª´ FCM: ${message.messageId}");

      await _saveAlertFromFcm(message);
      _showLocalNotification(message);
    } catch (e) {
      print("‚ùå L·ªói trong background handler: $e");
    }
  }

  // H√†m x·ª≠ l√Ω th√¥ng b√°o khi ·ª©ng d·ª•ng ƒëang ch·∫°y (foreground)
  Future<void> handleForegroundMessage(RemoteMessage message) async {
    print("üî• Nh·∫≠n alert foreground t·ª´ FCM: ${message.messageId}");

    try {
      await _saveAlertFromFcm(message);
      _showLocalNotification(message);
      _updateUiIfNeeded(message);
    } catch (e) {
      print("‚ùå L·ªói trong foreground handler: $e");
    }
  }

  // L∆∞u alert t·ª´ FCM v√†o Firestore s·ª≠ d·ª•ng model Alert
  static Future<void> _saveAlertFromFcm(RemoteMessage message) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        print("‚ö†Ô∏è Kh√¥ng c√≥ user ƒëƒÉng nh·∫≠p, b·ªè qua l∆∞u alert");
        return;
      }

      final alertId = message.data['alertId'];
      if (alertId == null) {
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y alertId trong d·ªØ li·ªáu FCM");
        return;
      }

      final alertDoc =
          await FirebaseFirestore.instance
              .collection("users")
              .doc(user.uid)
              .collection("alerts")
              .doc(alertId)
              .get();

      if (alertDoc.exists) {
        print("‚úÖ Alert ƒë√£ t·ªìn t·∫°i trong Firestore: $alertId");
        return;
      }

      final alert = Alert(
        alertId: alertId,
        cameraId: message.data['cameraId'] ?? 'unknown',
        cameraName: message.data['cameraName'] ?? 'Unknown Camera',
        location: message.data['location'] ?? 'Unknown Location',
        type: message.data['type'] ?? 'unknown',
        imageUrl: message.data['imageUrl'] ?? '',
        status: 'visible',
        timestamp: DateTime.now(),
        confidence:
            message.data['confidence'] != null
                ? double.tryParse(message.data['confidence']?.toString() ?? '')
                : null,
        fcmMessageId: message.messageId,
        isRead: false,
      );

      await FirebaseFirestore.instance
          .collection("users")
          .doc(user.uid)
          .collection("alerts")
          .doc(alertId)
          .set(alert.toJson());

      print("‚úÖ Alert l∆∞u v√†o Firestore th√†nh c√¥ng");
    } catch (e) {
      print("‚ùå L·ªói l∆∞u alert: $e");
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o c·ª•c b·ªô
  static void _showLocalNotification(RemoteMessage message) {
    try {
      final title = message.notification?.title ?? 'C·∫£nh b√°o t·ª´ Camera';
      final body = message.notification?.body ?? 'Ph√°t hi·ªán s·ª± c·ªë!';
      final alertId = message.data['alertId'] ?? '';

      NotificationService().showNotification(
        id: DateTime.now().millisecondsSinceEpoch,
        title: title,
        body: body,
        payload: alertId, // Truy·ªÅn alertId qua payload ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
      );
    } catch (e) {
      print("‚ùå L·ªói hi·ªÉn th·ªã th√¥ng b√°o c·ª•c b·ªô: $e");
    }
  }

  // C·∫≠p nh·∫≠t UI n·∫øu c·∫ßn
  void _updateUiIfNeeded(RemoteMessage message) {
    print("üì± UI c·∫ßn c·∫≠p nh·∫≠t cho alert: ${message.messageId}");
    // C√≥ th·ªÉ s·ª≠ d·ª•ng StreamController ho·∫∑c Provider ƒë·ªÉ th√¥ng b√°o UI c·∫≠p nh·∫≠t
  }

  // Kh·ªüi t·∫°o handler v√† l·∫Øng nghe th√¥ng b√°o
  Future<void> initialize() async {
    NotificationSettings settings = await _messaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      print("‚úÖ Quy·ªÅn th√¥ng b√°o ƒë∆∞·ª£c c·∫•p");
    } else {
      print("‚ö†Ô∏è Quy·ªÅn th√¥ng b√°o b·ªã t·ª´ ch·ªëi");
    }

    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      handleForegroundMessage(message);
    });

    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print("üì± Click v√†o th√¥ng b√°o: ${message.messageId}");
      _navigateToNotificationScreen(message);
    });

    String? token = await _messaging.getToken();
    print("FCM Token: $token");
  }

  // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh th√¥ng b√°o khi click v√†o FCM
  void _navigateToNotificationScreen(RemoteMessage message) {
    final alertId = message.data['alertId'];
    if (alertId != null && navigatorKey.currentContext != null) {
      Navigator.of(navigatorKey.currentContext!).push(
        MaterialPageRoute(builder: (_) => AlertDetailScreen(alertId: alertId)),
      );
    } else {
      print("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒëi·ªÅu h∆∞·ªõng: context null ho·∫∑c alertId kh√¥ng t·ªìn t·∫°i");
    }
  }
}
